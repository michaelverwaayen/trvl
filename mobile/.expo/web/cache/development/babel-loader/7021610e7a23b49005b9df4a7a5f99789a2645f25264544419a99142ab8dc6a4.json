{"ast":null,"code":"import { CodedError, uuid } from 'expo-modules-core';\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuid.v4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuid.v4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch {\n      installationId = getFallbackInstallationId();\n    }\n    return installationId;\n  },\n  getRegistrationInfoAsync: async () => {\n    if (typeof localStorage === 'undefined') {\n      return null;\n    }\n    return localStorage.getItem(REGISTRATION_INFO_KEY);\n  },\n  setRegistrationInfoAsync: async registrationInfo => {\n    if (typeof localStorage === 'undefined') {\n      return;\n    }\n    try {\n      if (registrationInfo) {\n        localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n      } else {\n        localStorage.removeItem(REGISTRATION_INFO_KEY);\n      }\n    } catch (error) {\n      throw new CodedError('ERR_NOTIFICATIONS_STORAGE_ERROR', `Could not modify localStorage to persist auto-registration information: ${error}`);\n    }\n  },\n  addListener: () => {},\n  removeListeners: () => {}\n};","map":{"version":3,"names":["CodedError","uuid","INSTALLATION_ID_KEY","REGISTRATION_INFO_KEY","getFallbackInstallationId","sessionInstallationId","v4","getInstallationIdAsync","installationId","localStorage","getItem","setItem","getRegistrationInfoAsync","setRegistrationInfoAsync","registrationInfo","removeItem","error","addListener","removeListeners"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/expo-notifications/src/ServerRegistrationModule.web.ts"],"sourcesContent":["import { CodedError, uuid } from 'expo-modules-core';\n\nimport { ServerRegistrationModule } from './ServerRegistrationModule.types';\n\nconst INSTALLATION_ID_KEY = 'EXPO_NOTIFICATIONS_INSTALLATION_ID';\nconst REGISTRATION_INFO_KEY = 'EXPO_NOTIFICATIONS_REGISTRATION_INFO';\n\n// Lazy fallback installationId per session initializer\nlet getFallbackInstallationId = () => {\n  const sessionInstallationId = uuid.v4();\n  getFallbackInstallationId = () => sessionInstallationId;\n};\n\nexport default {\n  getInstallationIdAsync: async () => {\n    let installationId;\n\n    try {\n      installationId = localStorage.getItem(INSTALLATION_ID_KEY);\n      if (!installationId || typeof installationId !== 'string') {\n        installationId = uuid.v4();\n        localStorage.setItem(INSTALLATION_ID_KEY, installationId);\n      }\n    } catch {\n      installationId = getFallbackInstallationId();\n    }\n\n    return installationId;\n  },\n  getRegistrationInfoAsync: async () => {\n    if (typeof localStorage === 'undefined') {\n      return null;\n    }\n    return localStorage.getItem(REGISTRATION_INFO_KEY);\n  },\n  setRegistrationInfoAsync: async (registrationInfo: string | null) => {\n    if (typeof localStorage === 'undefined') {\n      return;\n    }\n    try {\n      if (registrationInfo) {\n        localStorage.setItem(REGISTRATION_INFO_KEY, registrationInfo);\n      } else {\n        localStorage.removeItem(REGISTRATION_INFO_KEY);\n      }\n    } catch (error) {\n      throw new CodedError(\n        'ERR_NOTIFICATIONS_STORAGE_ERROR',\n        `Could not modify localStorage to persist auto-registration information: ${error}`\n      );\n    }\n  },\n  // mock implementations\n  addListener: () => {},\n  removeListeners: () => {},\n} as ServerRegistrationModule;\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,IAAI,QAAQ,mBAAmB;AAIpD,MAAMC,mBAAmB,GAAG,oCAAoC;AAChE,MAAMC,qBAAqB,GAAG,sCAAsC;AAGpE,IAAIC,yBAAyB,GAAGA,CAAA,KAAK;EACnC,MAAMC,qBAAqB,GAAGJ,IAAI,CAACK,EAAE,EAAE;EACvCF,yBAAyB,GAAGA,CAAA,KAAMC,qBAAqB;AACzD,CAAC;AAED,eAAe;EACbE,sBAAsB,EAAE,MAAAA,CAAA,KAAW;IACjC,IAAIC,cAAc;IAElB,IAAI;MACFA,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACR,mBAAmB,CAAC;MAC1D,IAAI,CAACM,cAAc,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;QACzDA,cAAc,GAAGP,IAAI,CAACK,EAAE,EAAE;QAC1BG,YAAY,CAACE,OAAO,CAACT,mBAAmB,EAAEM,cAAc,CAAC;MAC3D;IACF,CAAC,CAAC,MAAM;MACNA,cAAc,GAAGJ,yBAAyB,EAAE;IAC9C;IAEA,OAAOI,cAAc;EACvB,CAAC;EACDI,wBAAwB,EAAE,MAAAA,CAAA,KAAW;IACnC,IAAI,OAAOH,YAAY,KAAK,WAAW,EAAE;MACvC,OAAO,IAAI;IACb;IACA,OAAOA,YAAY,CAACC,OAAO,CAACP,qBAAqB,CAAC;EACpD,CAAC;EACDU,wBAAwB,EAAE,MAAOC,gBAA+B,IAAI;IAClE,IAAI,OAAOL,YAAY,KAAK,WAAW,EAAE;MACvC;IACF;IACA,IAAI;MACF,IAAIK,gBAAgB,EAAE;QACpBL,YAAY,CAACE,OAAO,CAACR,qBAAqB,EAAEW,gBAAgB,CAAC;MAC/D,CAAC,MAAM;QACLL,YAAY,CAACM,UAAU,CAACZ,qBAAqB,CAAC;MAChD;IACF,CAAC,CAAC,OAAOa,KAAK,EAAE;MACd,MAAM,IAAIhB,UAAU,CAClB,iCAAiC,EACjC,2EAA2EgB,KAAK,EAAE,CACnF;IACH;EACF,CAAC;EAEDC,WAAW,EAAEA,CAAA,KAAK,CAAE,CAAC;EACrBC,eAAe,EAAEA,CAAA,KAAK,CAAE;CACG","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}