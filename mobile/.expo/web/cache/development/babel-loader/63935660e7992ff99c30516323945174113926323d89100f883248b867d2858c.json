{"ast":null,"code":"import { Platform, UnavailabilityError } from 'expo-modules-core';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\nexport async function requestPermissionsAsync(permissions) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true\n    }\n  };\n  const requestedPlatformPermissions = requestedPermissions[Platform.OS];\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions);\n}","map":{"version":3,"names":["Platform","UnavailabilityError","NotificationPermissionsModule","getPermissionsAsync","requestPermissionsAsync","permissions","requestedPermissions","ios","allowAlert","allowBadge","allowSound","requestedPlatformPermissions","OS"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/expo-notifications/src/NotificationPermissions.ts"],"sourcesContent":["import { Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport { NotificationPermissionsRequest } from './NotificationPermissions.types';\nimport NotificationPermissionsModule from './NotificationPermissionsModule';\n\n/**\n * Calling this function checks current permissions settings related to notifications.\n * It lets you verify whether the app is currently allowed to display alerts, play sounds, etc.\n * There is no user-facing effect of calling this.\n * @return It returns a `Promise` resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).\n * @example Check if the app is allowed to send any type of notifications (interrupting and non-interruptingâ€“provisional on iOS).\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export async function allowsNotificationsAsync() {\n *   const settings = await Notifications.getPermissionsAsync();\n *   return (\n *     settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL\n *   );\n * }\n * ```\n * @header permissions\n */\nexport async function getPermissionsAsync() {\n  if (!NotificationPermissionsModule.getPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'getPermissionsAsync');\n  }\n\n  return await NotificationPermissionsModule.getPermissionsAsync();\n}\n\n/**\n * Prompts the user for notification permissions according to request. **Request defaults to asking the user to allow displaying alerts,\n * setting badge count and playing sounds**.\n * @param permissions An object representing configuration for the request scope.\n * @return It returns a Promise resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)).\n * On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).\n * @example Prompts the user to allow the app to show alerts, play sounds, set badge count and let Siri read out messages through AirPods.\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * export function requestPermissionsAsync() {\n *   return Notifications.requestPermissionsAsync({\n *     ios: {\n *       allowAlert: true,\n *       allowBadge: true,\n *       allowSound: true,\n *     },\n *   });\n * }\n * ```\n * @header permissions\n */\nexport async function requestPermissionsAsync(permissions?: NotificationPermissionsRequest) {\n  if (!NotificationPermissionsModule.requestPermissionsAsync) {\n    throw new UnavailabilityError('Notifications', 'requestPermissionsAsync');\n  }\n\n  const requestedPermissions = permissions ?? {\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n    },\n  };\n  const requestedPlatformPermissions =\n    requestedPermissions[Platform.OS as keyof typeof requestedPermissions];\n  // TODO(@kitten): This never checks whether the configuration object is undefined\n  return await NotificationPermissionsModule.requestPermissionsAsync(requestedPlatformPermissions!);\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,mBAAmB,QAAQ,mBAAmB;AAGjE,OAAOC,6BAA6B,MAAM,iCAAiC;AAqB3E,OAAO,eAAeC,mBAAmBA,CAAA;EACvC,IAAI,CAACD,6BAA6B,CAACC,mBAAmB,EAAE;IACtD,MAAM,IAAIF,mBAAmB,CAAC,eAAe,EAAE,qBAAqB,CAAC;EACvE;EAEA,OAAO,MAAMC,6BAA6B,CAACC,mBAAmB,EAAE;AAClE;AAwBA,OAAO,eAAeC,uBAAuBA,CAACC,WAA4C;EACxF,IAAI,CAACH,6BAA6B,CAACE,uBAAuB,EAAE;IAC1D,MAAM,IAAIH,mBAAmB,CAAC,eAAe,EAAE,yBAAyB,CAAC;EAC3E;EAEA,MAAMK,oBAAoB,GAAGD,WAAW,IAAI;IAC1CE,GAAG,EAAE;MACHC,UAAU,EAAE,IAAI;MAChBC,UAAU,EAAE,IAAI;MAChBC,UAAU,EAAE;;GAEf;EACD,MAAMC,4BAA4B,GAChCL,oBAAoB,CAACN,QAAQ,CAACY,EAAuC,CAAC;EAExE,OAAO,MAAMV,6BAA6B,CAACE,uBAAuB,CAACO,4BAA6B,CAAC;AACnG","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}