{"ast":null,"code":"import { UnavailabilityError } from 'expo-modules-core';\nimport NotificationScheduler from './NotificationScheduler';\nimport { parseTrigger } from './scheduleNotificationAsync';\nexport default async function getNextTriggerDateAsync(trigger) {\n  if (!NotificationScheduler.getNextTriggerDateAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getNextTriggerDateAsync');\n  }\n  return await NotificationScheduler.getNextTriggerDateAsync(parseTrigger(trigger));\n}","map":{"version":3,"names":["UnavailabilityError","NotificationScheduler","parseTrigger","getNextTriggerDateAsync","trigger"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/expo-notifications/src/getNextTriggerDateAsync.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationScheduler from './NotificationScheduler';\nimport { SchedulableNotificationTriggerInput } from './Notifications.types';\nimport { parseTrigger } from './scheduleNotificationAsync';\n\n/**\n * Allows you to check what will be the next trigger date for given notification trigger input.\n * @param trigger The schedulable notification trigger you would like to check next trigger date for (of type [`SchedulableNotificationTriggerInput`](#schedulablenotificationtriggerinput)).\n * @return If the return value is `null`, the notification won't be triggered. Otherwise, the return value is the Unix timestamp in milliseconds\n * at which the notification will be triggered.\n * @example Calculate next trigger date for a notification trigger:\n * ```ts\n * import * as Notifications from 'expo-notifications';\n *\n * async function logNextTriggerDate() {\n *   try {\n *     const nextTriggerDate = await Notifications.getNextTriggerDateAsync({\n *       hour: 9,\n *       minute: 0,\n *     });\n *     console.log(nextTriggerDate === null ? 'No next trigger date' : new Date(nextTriggerDate));\n *   } catch (e) {\n *     console.warn(`Couldn't have calculated next trigger date: ${e}`);\n *   }\n * }\n * ```\n * @header schedule\n */\nexport default async function getNextTriggerDateAsync(\n  trigger: SchedulableNotificationTriggerInput\n): Promise<number | null> {\n  if (!NotificationScheduler.getNextTriggerDateAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getNextTriggerDateAsync');\n  }\n\n  return await NotificationScheduler.getNextTriggerDateAsync(parseTrigger(trigger));\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,qBAAqB,MAAM,yBAAyB;AAE3D,SAASC,YAAY,QAAQ,6BAA6B;AAyB1D,eAAe,eAAeC,uBAAuBA,CACnDC,OAA4C;EAE5C,IAAI,CAACH,qBAAqB,CAACE,uBAAuB,EAAE;IAClD,MAAM,IAAIH,mBAAmB,CAAC,mBAAmB,EAAE,yBAAyB,CAAC;EAC/E;EAEA,OAAO,MAAMC,qBAAqB,CAACE,uBAAuB,CAACD,YAAY,CAACE,OAAO,CAAC,CAAC;AACnF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}