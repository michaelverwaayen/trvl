{"ast":null,"code":"import { PermissionStatus, createPermissionHook, Platform } from 'expo-modules-core';\nimport ExpoLocation from './ExpoLocation';\nimport { LocationAccuracy, LocationActivityType, LocationGeofencingEventType, LocationGeofencingRegionState } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\nimport { setGoogleApiKey, googleGeocodeAsync, googleReverseGeocodeAsync } from './LocationGoogleGeocoding';\nimport { LocationSubscriber, HeadingSubscriber, _getCurrentWatchId } from './LocationSubscribers';\nexport async function getProviderStatusAsync() {\n  return ExpoLocation.getProviderStatusAsync();\n}\nexport async function enableNetworkProviderAsync() {\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\nexport async function getCurrentPositionAsync(options = {}) {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\nexport async function getLastKnownPositionAsync(options = {}) {\n  return ExpoLocation.getLastKnownPositionAsync(options);\n}\nexport async function watchPositionAsync(options, callback) {\n  const watchId = LocationSubscriber.registerCallback(callback);\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n  return {\n    remove() {\n      LocationSubscriber.unregisterCallback(watchId);\n    }\n  };\n}\nexport async function getHeadingAsync() {\n  return new Promise(async resolve => {\n    let tries = 0;\n    const subscription = await watchHeadingAsync(heading => {\n      if (heading.accuracy > 1 || tries > 5) {\n        subscription.remove();\n        resolve(heading);\n      } else {\n        tries += 1;\n      }\n    });\n  });\n}\nexport async function watchHeadingAsync(callback) {\n  const watchId = HeadingSubscriber.registerCallback(callback);\n  await ExpoLocation.watchDeviceHeading(watchId);\n  return {\n    remove() {\n      HeadingSubscriber.unregisterCallback(watchId);\n    }\n  };\n}\nexport async function geocodeAsync(address, options) {\n  if (typeof address !== 'string') {\n    throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);\n  }\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    return await googleGeocodeAsync(address);\n  }\n  return await ExpoLocation.geocodeAsync(address);\n}\nexport async function reverseGeocodeAsync(location, options) {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError('Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.');\n  }\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    return await googleReverseGeocodeAsync(location);\n  }\n  return await ExpoLocation.reverseGeocodeAsync(location);\n}\nexport async function getPermissionsAsync() {\n  console.warn(`\"getPermissionsAsync()\" is now deprecated. Please use \"getForegroundPermissionsAsync()\" or \"getBackgroundPermissionsAsync()\" instead.`);\n  return await ExpoLocation.getPermissionsAsync();\n}\nexport async function requestPermissionsAsync() {\n  console.warn(`\"requestPermissionsAsync()\" is now deprecated. Please use \"requestForegroundPermissionsAsync()\" or \"requestBackgroundPermissionsAsync()\" instead.`);\n  return await ExpoLocation.requestPermissionsAsync();\n}\nexport async function getForegroundPermissionsAsync() {\n  return await ExpoLocation.getForegroundPermissionsAsync();\n}\nexport async function requestForegroundPermissionsAsync() {\n  return await ExpoLocation.requestForegroundPermissionsAsync();\n}\nexport const useForegroundPermissions = createPermissionHook({\n  getMethod: getForegroundPermissionsAsync,\n  requestMethod: requestForegroundPermissionsAsync\n});\nexport async function getBackgroundPermissionsAsync() {\n  return await ExpoLocation.getBackgroundPermissionsAsync();\n}\nexport async function requestBackgroundPermissionsAsync() {\n  return await ExpoLocation.requestBackgroundPermissionsAsync();\n}\nexport const useBackgroundPermissions = createPermissionHook({\n  getMethod: getBackgroundPermissionsAsync,\n  requestMethod: requestBackgroundPermissionsAsync\n});\nexport async function hasServicesEnabledAsync() {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\nfunction _validateTaskName(taskName) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);\n  }\n}\nexport async function isBackgroundLocationAvailableAsync() {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\nexport async function startLocationUpdatesAsync(taskName, options = {\n  accuracy: LocationAccuracy.Balanced\n}) {\n  _validateTaskName(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\nexport async function stopLocationUpdatesAsync(taskName) {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\nexport async function hasStartedLocationUpdatesAsync(taskName) {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\nfunction _validateRegions(regions) {\n  if (!regions || regions.length === 0) {\n    throw new Error('Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions');\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(`Region's longitude must be a number. Got '${region.longitude}' instead.`);\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\nexport async function startGeofencingAsync(taskName, regions = []) {\n  _validateTaskName(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, {\n    regions\n  });\n}\nexport async function stopGeofencingAsync(taskName) {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\nexport async function hasStartedGeofencingAsync(taskName) {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\nexport { LocationEventEmitter as EventEmitter, _getCurrentWatchId };\nexport { LocationAccuracy as Accuracy, LocationActivityType as ActivityType, LocationGeofencingEventType as GeofencingEventType, LocationGeofencingRegionState as GeofencingRegionState, PermissionStatus, setGoogleApiKey };\nexport { installWebGeolocationPolyfill } from './GeolocationPolyfill';\nexport * from './Location.types';","map":{"version":3,"names":["PermissionStatus","createPermissionHook","Platform","ExpoLocation","LocationAccuracy","LocationActivityType","LocationGeofencingEventType","LocationGeofencingRegionState","LocationEventEmitter","setGoogleApiKey","googleGeocodeAsync","googleReverseGeocodeAsync","LocationSubscriber","HeadingSubscriber","_getCurrentWatchId","getProviderStatusAsync","enableNetworkProviderAsync","OS","getCurrentPositionAsync","options","getLastKnownPositionAsync","watchPositionAsync","callback","watchId","registerCallback","watchPositionImplAsync","remove","unregisterCallback","getHeadingAsync","Promise","resolve","tries","subscription","watchHeadingAsync","heading","accuracy","watchDeviceHeading","geocodeAsync","address","TypeError","useGoogleMaps","reverseGeocodeAsync","location","latitude","longitude","getPermissionsAsync","console","warn","requestPermissionsAsync","getForegroundPermissionsAsync","requestForegroundPermissionsAsync","useForegroundPermissions","getMethod","requestMethod","getBackgroundPermissionsAsync","requestBackgroundPermissionsAsync","useBackgroundPermissions","hasServicesEnabledAsync","_validateTaskName","taskName","Error","isBackgroundLocationAvailableAsync","providerStatus","backgroundModeEnabled","startLocationUpdatesAsync","Balanced","stopLocationUpdatesAsync","hasStartedLocationUpdatesAsync","_validateRegions","regions","length","region","radius","startGeofencingAsync","stopGeofencingAsync","hasStartedGeofencingAsync","EventEmitter","Accuracy","ActivityType","GeofencingEventType","GeofencingRegionState","installWebGeolocationPolyfill"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/expo-location/src/Location.ts"],"sourcesContent":["import {\n  PermissionStatus,\n  PermissionResponse,\n  PermissionHookOptions,\n  createPermissionHook,\n  Platform,\n} from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport {\n  LocationAccuracy,\n  LocationCallback,\n  LocationGeocodedAddress,\n  LocationGeocodedLocation,\n  LocationHeadingCallback,\n  LocationHeadingObject,\n  LocationLastKnownOptions,\n  LocationObject,\n  LocationOptions,\n  LocationPermissionResponse,\n  LocationProviderStatus,\n  LocationRegion,\n  LocationSubscription,\n  LocationTaskOptions,\n  LocationActivityType,\n  LocationGeofencingEventType,\n  LocationGeofencingRegionState,\n  LocationGeocodingOptions,\n} from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\nimport {\n  setGoogleApiKey,\n  googleGeocodeAsync,\n  googleReverseGeocodeAsync,\n} from './LocationGoogleGeocoding';\nimport { LocationSubscriber, HeadingSubscriber, _getCurrentWatchId } from './LocationSubscribers';\n\n// @needsAudit\n/**\n * Check status of location providers.\n * @return A promise which fulfills with an object of type [LocationProviderStatus](#locationproviderstatus).\n */\nexport async function getProviderStatusAsync(): Promise<LocationProviderStatus> {\n  return ExpoLocation.getProviderStatusAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to turn on high accuracy location mode which enables network provider that uses\n * Google Play services to improve location accuracy and location-based services.\n * @return A promise resolving as soon as the user accepts the dialog. Rejects if denied.\n */\nexport async function enableNetworkProviderAsync(): Promise<void> {\n  // If network provider is disabled (user's location mode is set to \"Device only\"),\n  // Android's location provider may not give you any results. Use this method in order to ask the user\n  // to change the location mode to \"High accuracy\" which uses Google Play services and enables network provider.\n  // `getCurrentPositionAsync` and `watchPositionAsync` are doing it automatically anyway.\n\n  if (Platform.OS === 'android') {\n    return ExpoLocation.enableNetworkProviderAsync();\n  }\n}\n\n// @needsAudit\n/**\n * Requests for one-time delivery of the user's current location.\n * Depending on given `accuracy` option it may take some time to resolve,\n * especially when you're inside a building.\n * > __Note:__ Calling it causes the location manager to obtain a location fix which may take several\n * > seconds. Consider using [`Location.getLastKnownPositionAsync`](#locationgetlastknownpositionasyncoptions)\n * > if you expect to get a quick response and high accuracy is not required.\n * @param options\n * @return A promise which fulfills with an object of type [`LocationObject`](#locationobject).\n */\nexport async function getCurrentPositionAsync(\n  options: LocationOptions = {}\n): Promise<LocationObject> {\n  return ExpoLocation.getCurrentPositionAsync(options);\n}\n\n// @needsAudit\n/**\n * Gets the last known position of the device or `null` if it's not available or doesn't match given\n * requirements such as maximum age or required accuracy.\n * It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current\n * location, but keep in mind the returned location may not be up-to-date.\n * @param options\n * @return A promise which fulfills with an object of type [LocationObject](#locationobject) or\n * `null` if it's not available or doesn't match given requirements such as maximum age or required\n * accuracy.\n */\nexport async function getLastKnownPositionAsync(\n  options: LocationLastKnownOptions = {}\n): Promise<LocationObject | null> {\n  return ExpoLocation.getLastKnownPositionAsync(options);\n}\n\n// @needsAudit\n/**\n * Subscribe to location updates from the device. Please note that updates will only occur while the\n * application is in the foreground. To get location updates while in background you'll need to use\n * [Location.startLocationUpdatesAsync](#locationstartlocationupdatesasynctaskname-options).\n * @param options\n * @param callback This function is called on each location update. It receives an object of type\n * [`LocationObject`](#locationobject) as the first argument.\n * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n */\nexport async function watchPositionAsync(\n  options: LocationOptions,\n  callback: LocationCallback\n): Promise<LocationSubscription> {\n  const watchId = LocationSubscriber.registerCallback(callback);\n  await ExpoLocation.watchPositionImplAsync(watchId, options);\n\n  return {\n    remove() {\n      LocationSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n// @needsAudit\n/**\n * Gets the current heading information from the device. To simplify, it calls `watchHeadingAsync`\n * and waits for a couple of updates, and then returns the one that is accurate enough.\n * @return A promise which fulfills with an object of type [LocationHeadingObject](#locationheadingobject).\n */\nexport async function getHeadingAsync(): Promise<LocationHeadingObject> {\n  return new Promise(async (resolve) => {\n    let tries = 0;\n\n    const subscription = await watchHeadingAsync((heading) => {\n      if (heading.accuracy > 1 || tries > 5) {\n        subscription.remove();\n        resolve(heading);\n      } else {\n        tries += 1;\n      }\n    });\n  });\n}\n\n// @needsAudit\n/**\n * Subscribe to compass updates from the device.\n * @param callback This function is called on each compass update. It receives an object of type\n * [LocationHeadingObject](#locationheadingobject) as the first argument.\n * @return A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.\n */\nexport async function watchHeadingAsync(\n  callback: LocationHeadingCallback\n): Promise<LocationSubscription> {\n  const watchId = HeadingSubscriber.registerCallback(callback);\n  await ExpoLocation.watchDeviceHeading(watchId);\n\n  return {\n    remove() {\n      HeadingSubscriber.unregisterCallback(watchId);\n    },\n  };\n}\n\n// @needsAudit\n/**\n * Geocode an address string to latitude-longitude location.\n * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n * > requests at a time can result in an error, so they have to be managed properly.\n * > It's also discouraged to use geocoding while the app is in the background and its results won't\n * > be shown to the user immediately.\n *\n * > On Android, you must request a location permission (`Permissions.LOCATION`) from the user\n * > before geocoding can be used.\n * @param address A string representing address, eg. `\"Baker Street London\"`.\n * @param options\n * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedLocation`](#locationgeocodedlocation) objects.\n */\nexport async function geocodeAsync(\n  address: string,\n  options?: LocationGeocodingOptions\n): Promise<LocationGeocodedLocation[]> {\n  if (typeof address !== 'string') {\n    throw new TypeError(`Address to geocode must be a string. Got ${address} instead.`);\n  }\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    return await googleGeocodeAsync(address);\n  }\n  return await ExpoLocation.geocodeAsync(address);\n}\n\n// @needsAudit\n/**\n * Reverse geocode a location to postal address.\n * > **Note**: Geocoding is resource consuming and has to be used reasonably. Creating too many\n * > requests at a time can result in an error, so they have to be managed properly.\n * > It's also discouraged to use geocoding while the app is in the background and its results won't\n * > be shown to the user immediately.\n *\n * > On Android, you must request a location permission (`Permissions.LOCATION`) from the user\n * > before geocoding can be used.\n * @param location An object representing a location.\n * @param options\n * @return A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedAddress`](#locationgeocodedaddress) objects.\n */\nexport async function reverseGeocodeAsync(\n  location: Pick<LocationGeocodedLocation, 'latitude' | 'longitude'>,\n  options?: LocationGeocodingOptions\n): Promise<LocationGeocodedAddress[]> {\n  if (typeof location.latitude !== 'number' || typeof location.longitude !== 'number') {\n    throw new TypeError(\n      'Location to reverse-geocode must be an object with number properties `latitude` and `longitude`.'\n    );\n  }\n  if (options?.useGoogleMaps || Platform.OS === 'web') {\n    return await googleReverseGeocodeAsync(location);\n  }\n  return await ExpoLocation.reverseGeocodeAsync(location);\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing location.\n * @return A promise that fulfills with an object of type [LocationPermissionResponse](#locationpermissionresponse).\n * @deprecated Use [`getForegroundPermissionsAsync`](#locationgetforegroundpermissionsasync) or [`getBackgroundPermissionsAsync`](#locationgetbackgroundpermissionsasync) instead.\n */\nexport async function getPermissionsAsync(): Promise<LocationPermissionResponse> {\n  console.warn(\n    `\"getPermissionsAsync()\" is now deprecated. Please use \"getForegroundPermissionsAsync()\" or \"getBackgroundPermissionsAsync()\" instead.`\n  );\n  return await ExpoLocation.getPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for location.\n * @return A promise that fulfills with an object of type [LocationPermissionResponse](#locationpermissionresponse).\n * @deprecated Use [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync) or [`requestBackgroundPermissionsAsync`](#locationrequestbackgroundpermissionsasync) instead.\n */\nexport async function requestPermissionsAsync(): Promise<LocationPermissionResponse> {\n  console.warn(\n    `\"requestPermissionsAsync()\" is now deprecated. Please use \"requestForegroundPermissionsAsync()\" or \"requestBackgroundPermissionsAsync()\" instead.`\n  );\n\n  return await ExpoLocation.requestPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing location while the app is in the foreground.\n * @return A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).\n */\nexport async function getForegroundPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.getForegroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for location while the app is in the foreground.\n * @return A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).\n */\nexport async function requestForegroundPermissionsAsync(): Promise<LocationPermissionResponse> {\n  return await ExpoLocation.requestForegroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions for the foreground location.\n * This uses both `requestForegroundPermissionsAsync` and `getForegroundPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Location.useForegroundPermissions();\n * ```\n */\nexport const useForegroundPermissions = createPermissionHook({\n  getMethod: getForegroundPermissionsAsync,\n  requestMethod: requestForegroundPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing location while the app is in the background.\n * @return A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).\n */\nexport async function getBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.getBackgroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for location while the app is in the background.\n * On __Android 11 or higher__: this method will open the system settings page - before that happens\n * you should explain to the user why your application needs background location permission.\n * For example, you can use `Modal` component from `react-native` to do that.\n * > __Note__: Foreground permissions should be granted before asking for the background permissions\n * (your app can't obtain background permission without foreground permission).\n * @return A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).\n */\nexport async function requestBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n  return await ExpoLocation.requestBackgroundPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions for the foreground location.\n * This uses both `requestBackgroundPermissionsAsync` and `getBackgroundPermissionsAsync` to\n * interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Location.useBackgroundPermissions();\n * ```\n */\nexport const useBackgroundPermissions = createPermissionHook({\n  getMethod: getBackgroundPermissionsAsync,\n  requestMethod: requestBackgroundPermissionsAsync,\n});\n\n// --- Location service\n\n// @needsAudit\n/**\n * Checks whether location services are enabled by the user.\n * @return A promise which fulfills to `true` if location services are enabled on the device,\n * or `false` if not.\n */\nexport async function hasServicesEnabledAsync(): Promise<boolean> {\n  return await ExpoLocation.hasServicesEnabledAsync();\n}\n\n// --- Background location updates\n\nfunction _validateTaskName(taskName: string) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new Error(`\\`taskName\\` must be a non-empty string. Got ${taskName} instead.`);\n  }\n}\n\n// @docsMissing\nexport async function isBackgroundLocationAvailableAsync(): Promise<boolean> {\n  const providerStatus = await getProviderStatusAsync();\n  return providerStatus.backgroundModeEnabled;\n}\n\n// @needsAudit\n/**\n * Registers for receiving location updates that can also come when the app is in the background.\n *\n * # Task parameters\n *\n * Background location task will be receiving following data:\n * - `locations` - An array of the new locations.\n *\n * ```ts\n * import * as TaskManager from 'expo-task-manager';\n *\n * TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { locations }, error }) => {\n *  if (error) {\n *    // check `error.message` for more details.\n *    return;\n *  }\n *  console.log('Received new locations', locations);\n * });\n * ```\n *\n * @param taskName Name of the task receiving location updates.\n * @param options An object of options passed to the location manager.\n *\n * @return A promise resolving once the task with location updates is registered.\n */\nexport async function startLocationUpdatesAsync(\n  taskName: string,\n  options: LocationTaskOptions = { accuracy: LocationAccuracy.Balanced }\n): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.startLocationUpdatesAsync(taskName, options);\n}\n\n// @needsAudit\n/**\n * Stops geofencing for specified task.\n * @param taskName Name of the background location task to stop.\n * @return A promise resolving as soon as the task is unregistered.\n */\nexport async function stopLocationUpdatesAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopLocationUpdatesAsync(taskName);\n}\n\n// @needsAudit\n/**\n * @param taskName Name of the location task to check.\n * @return A promise which fulfills with boolean value indicating whether the location task is\n * started or not.\n */\nexport async function hasStartedLocationUpdatesAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedLocationUpdatesAsync(taskName);\n}\n\n// --- Geofencing\n\nfunction _validateRegions(regions: LocationRegion[]) {\n  if (!regions || regions.length === 0) {\n    throw new Error(\n      'Regions array cannot be empty. Use `stopGeofencingAsync` if you want to stop geofencing all regions'\n    );\n  }\n  for (const region of regions) {\n    if (typeof region.latitude !== 'number') {\n      throw new TypeError(`Region's latitude must be a number. Got '${region.latitude}' instead.`);\n    }\n    if (typeof region.longitude !== 'number') {\n      throw new TypeError(\n        `Region's longitude must be a number. Got '${region.longitude}' instead.`\n      );\n    }\n    if (typeof region.radius !== 'number') {\n      throw new TypeError(`Region's radius must be a number. Got '${region.radius}' instead.`);\n    }\n  }\n}\n\n// @needsAudit\n/**\n * Starts geofencing for given regions. When the new event comes, the task with specified name will\n * be called with the region that the device enter to or exit from.\n * If you want to add or remove regions from already running geofencing task, you can just call\n * `startGeofencingAsync` again with the new array of regions.\n *\n * # Task parameters\n *\n * Geofencing task will be receiving following data:\n *  - `eventType` - Indicates the reason for calling the task, which can be triggered by entering or exiting the region.\n *    See [GeofencingEventType](#geofencingeventtype).\n *  - `region` - Object containing details about updated region. See [LocationRegion](#locationregion) for more details.\n *\n * @param taskName Name of the task that will be called when the device enters or exits from specified regions.\n * @param regions Array of region objects to be geofenced.\n *\n * @return A promise resolving as soon as the task is registered.\n *\n * @example\n * ```ts\n * import { GeofencingEventType } from 'expo-location';\n * import * as TaskManager from 'expo-task-manager';\n *\n *  TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { eventType, region }, error }) => {\n *   if (error) {\n *     // check `error.message` for more details.\n *     return;\n *   }\n *   if (eventType === GeofencingEventType.Enter) {\n *     console.log(\"You've entered region:\", region);\n *   } else if (eventType === GeofencingEventType.Exit) {\n *     console.log(\"You've left region:\", region);\n *   }\n * });\n * ```\n */\nexport async function startGeofencingAsync(\n  taskName: string,\n  regions: LocationRegion[] = []\n): Promise<void> {\n  _validateTaskName(taskName);\n  _validateRegions(regions);\n  await ExpoLocation.startGeofencingAsync(taskName, { regions });\n}\n\n// @needsAudit\n/**\n * Stops geofencing for specified task. It unregisters the background task so the app will not be\n * receiving any updates, especially in the background.\n * @param taskName Name of the task to unregister.\n * @return A promise resolving as soon as the task is unregistered.\n */\nexport async function stopGeofencingAsync(taskName: string): Promise<void> {\n  _validateTaskName(taskName);\n  await ExpoLocation.stopGeofencingAsync(taskName);\n}\n\n// @needsAudit\n/**\n * @param taskName Name of the geofencing task to check.\n * @return A promise which fulfills with boolean value indicating whether the geofencing task is\n * started or not.\n */\nexport async function hasStartedGeofencingAsync(taskName: string): Promise<boolean> {\n  _validateTaskName(taskName);\n  return ExpoLocation.hasStartedGeofencingAsync(taskName);\n}\n\nexport { LocationEventEmitter as EventEmitter, _getCurrentWatchId };\n\nexport {\n  LocationAccuracy as Accuracy,\n  LocationActivityType as ActivityType,\n  LocationGeofencingEventType as GeofencingEventType,\n  LocationGeofencingRegionState as GeofencingRegionState,\n  PermissionStatus,\n  PermissionHookOptions,\n  setGoogleApiKey,\n};\n\nexport { installWebGeolocationPolyfill } from './GeolocationPolyfill';\nexport * from './Location.types';\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}