{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\nexport default function ChatRoom(_ref) {\n  var chatRoomId = _ref.chatRoomId,\n    sender = _ref.sender;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    input = _useState4[0],\n    setInput = _useState4[1];\n  useEffect(function () {\n    var fetchMessages = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        var _yield$supabase$from$ = yield supabase.from('chat_messages').select('*').eq('chat_room_id', chatRoomId).order('created_at'),\n          data = _yield$supabase$from$.data;\n        setMessages(data || []);\n      });\n      return function fetchMessages() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var channel = supabase.channel(`chat-${chatRoomId}`).on('postgres_changes', {\n      event: 'INSERT',\n      schema: 'public',\n      table: 'chat_messages'\n    }, function (payload) {\n      setMessages(function (prev) {\n        return [].concat(_toConsumableArray(prev), [payload.new]);\n      });\n    }).subscribe();\n    fetchMessages();\n    return function () {\n      supabase.removeChannel(channel);\n    };\n  }, [chatRoomId]);\n  useEffect(function () {\n    var fetchQuoteStatus = function () {\n      var _ref3 = _asyncToGenerator(function* () {\n        var _yield$supabase$from$2 = yield supabase.from('quotes').select('*').eq('log_id', chatRoomId).eq('status', 'accepted').maybeSingle(),\n          data = _yield$supabase$from$2.data;\n        if (data) {\n          setMessages(function (prev) {\n            return [].concat(_toConsumableArray(prev), [{\n              id: 'system-accepted',\n              sender: 'system',\n              message: '✅ Your job has been accepted!'\n            }]);\n          });\n        }\n      });\n      return function fetchQuoteStatus() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    fetchQuoteStatus();\n  }, [chatRoomId]);\n  var sendMessage = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      if (!input.trim()) return;\n      yield supabase.from('chat_messages').insert({\n        chat_room_id: chatRoomId,\n        sender: sender,\n        message: input\n      });\n      setInput('');\n    });\n    return function sendMessage() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  return _jsxs(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [_jsx(\"h2\", {\n      children: \"Live Chat\"\n    }), _jsx(\"div\", {\n      style: {\n        maxHeight: 300,\n        overflowY: 'scroll',\n        border: '1px solid #ccc',\n        padding: 10\n      },\n      children: messages.map(function (msg) {\n        return _jsxs(\"div\", {\n          style: {\n            margin: '10px 0'\n          },\n          children: [_jsxs(\"strong\", {\n            children: [msg.sender, \":\"]\n          }), \" \", msg.message]\n        }, msg.id || Math.random());\n      })\n    }), _jsx(\"input\", {\n      value: input,\n      onChange: function onChange(e) {\n        return setInput(e.target.value);\n      },\n      placeholder: \"Type a message...\",\n      style: {\n        width: '80%',\n        marginRight: 10\n      }\n    }), _jsx(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    })]\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","createClient","jsx","_jsx","jsxs","_jsxs","supabase","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","ChatRoom","_ref","chatRoomId","sender","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","input","setInput","fetchMessages","_ref2","_asyncToGenerator","_yield$supabase$from$","from","select","eq","order","data","apply","arguments","channel","on","event","schema","table","payload","prev","concat","_toConsumableArray","new","subscribe","removeChannel","fetchQuoteStatus","_ref3","_yield$supabase$from$2","maybeSingle","id","message","sendMessage","_ref4","trim","insert","chat_room_id","style","padding","children","maxHeight","overflowY","border","map","msg","margin","Math","random","value","onChange","e","target","placeholder","width","marginRight","onClick"],"sources":["/Users/michaelverwaayen/RFQ/mobile/ChatRoom.js"],"sourcesContent":["// === ChatRoom.js ===\nimport React, { useEffect, useState } from 'react';\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n);\n\nexport default function ChatRoom({ chatRoomId, sender }) {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const { data } = await supabase\n        .from('chat_messages')\n        .select('*')\n        .eq('chat_room_id', chatRoomId)\n        .order('created_at');\n      setMessages(data || []);\n    };\n\n    const channel = supabase\n      .channel(`chat-${chatRoomId}`)\n      .on(\n        'postgres_changes',\n        { event: 'INSERT', schema: 'public', table: 'chat_messages' },\n        payload => {\n          setMessages(prev => [...prev, payload.new]);\n        }\n      )\n      .subscribe();\n\n    fetchMessages();\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [chatRoomId]);\n\n  useEffect(() => {\n    const fetchQuoteStatus = async () => {\n      const { data } = await supabase\n        .from('quotes')\n        .select('*')\n        .eq('log_id', chatRoomId)\n        .eq('status', 'accepted')\n        .maybeSingle();\n\n      if (data) {\n        setMessages(prev => [\n          ...prev,\n          { id: 'system-accepted', sender: 'system', message: '✅ Your job has been accepted!' }\n        ]);\n      }\n    };\n\n    fetchQuoteStatus();\n  }, [chatRoomId]);\n\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    await supabase.from('chat_messages').insert({\n      chat_room_id: chatRoomId,\n      sender,\n      message: input\n    });\n    setInput('');\n  };\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h2>Live Chat</h2>\n      <div style={{ maxHeight: 300, overflowY: 'scroll', border: '1px solid #ccc', padding: 10 }}>\n        {messages.map(msg => (\n          <div key={msg.id || Math.random()} style={{ margin: '10px 0' }}>\n            <strong>{msg.sender}:</strong> {msg.message}\n          </div>\n        ))}\n      </div>\n      <input\n        value={input}\n        onChange={e => setInput(e.target.value)}\n        placeholder=\"Type a message...\"\n        style={{ width: '80%', marginRight: 10 }}\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}