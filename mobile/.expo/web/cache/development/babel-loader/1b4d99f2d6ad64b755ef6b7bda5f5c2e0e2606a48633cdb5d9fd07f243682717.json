{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"name\", \"size\", \"color\", \"style\", \"children\"];\nvar _jsxFileName = \"/Users/michaelverwaayen/RFQ/mobile/node_modules/react-native-vector-icons/lib/create-icon-set.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  const fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n  class Icon extends PureComponent {\n    root = null;\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any,\n      children: PropTypes.node,\n      style: PropTypes.any\n    };\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false\n    };\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n    handleRef = ref => {\n      this.root = ref;\n    };\n    render() {\n      const _this$props = this.props,\n        {\n          name,\n          size,\n          color,\n          style,\n          children\n        } = _this$props,\n        props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n      const styleDefaults = {\n        fontSize: size,\n        color\n      };\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal'\n      };\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n      return _jsxDEV(Text, Object.assign({\n        selectable: false\n      }, props, {\n        children: [glyph, children]\n      }), void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this);\n    }\n  }\n  const imageSourceCache = createIconSourceCache();\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n  function getImageSourceSync(name, size = DEFAULT_ICON_SIZE, color = DEFAULT_ICON_COLOR) {\n    ensureNativeModuleAvailable();\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(fontReference, glyph, size, processedColor);\n      const value = {\n        uri: imagePath,\n        scale: PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n  async function getImageSource(name, size = DEFAULT_ICON_SIZE, color = DEFAULT_ICON_COLOR) {\n    ensureNativeModuleAvailable();\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor);\n      const value = {\n        uri: imagePath,\n        scale: PixelRatio.get()\n      };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n  function getFontFamily() {\n    return fontReference;\n  }\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"names":["React","PureComponent","PropTypes","NativeModules","Platform","PixelRatio","processColor","Text","ensureNativeModuleAvailable","createIconSourceCache","createIconButtonComponent","jsxDEV","_jsxDEV","NativeIconAPI","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","select","windows","android","web","default","IconNamePropType","oneOf","Object","keys","Icon","root","propTypes","allowFontScaling","bool","name","size","number","color","any","children","node","style","defaultProps","setNativeProps","nativeProps","handleRef","ref","render","_this$props","props","_objectWithoutPropertiesLoose","_excluded","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","assign","selectable","fileName","_jsxFileName","lineNumber","columnNumber","imageSourceCache","resolveGlyph","getImageSourceSync","processedColor","cacheKey","has","get","imagePath","getImageForFontSync","value","uri","scale","setValue","error","setError","getImageSource","getImageForFont","loadFont","file","OS","Error","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}