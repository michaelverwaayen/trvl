{"ast":null,"code":"import { LegacyEventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\nimport { mapNotification, mapNotificationResponse } from './utils/mapNotificationResponse';\nconst emitter = new LegacyEventEmitter(NotificationsEmitterModule);\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\nconst didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\nexport function addNotificationReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationEventName, notification => {\n    const mappedNotification = mapNotification(notification);\n    listener(mappedNotification);\n  });\n}\nexport function addNotificationsDroppedListener(listener) {\n  return emitter.addListener(didDropNotificationsEventName, listener);\n}\nexport function addNotificationResponseReceivedListener(listener) {\n  return emitter.addListener(didReceiveNotificationResponseEventName, response => {\n    const mappedResponse = mapNotificationResponse(response);\n    listener(mappedResponse);\n  });\n}\nexport function removeNotificationSubscription(subscription) {\n  console.warn('`removeNotificationSubscription` is deprecated. Call `subscription.remove()` instead.');\n  if (typeof subscription?.remove === 'function') {\n    subscription.remove();\n  } else {\n    throw new Error(`removeNotificationSubscription: Provided value is not a subscription: ${subscription}`);\n  }\n}\nexport async function getLastNotificationResponseAsync() {\n  return getLastNotificationResponse();\n}\nexport function getLastNotificationResponse() {\n  if (!NotificationsEmitterModule.getLastNotificationResponse) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponse');\n  }\n  const response = NotificationsEmitterModule.getLastNotificationResponse();\n  const mappedResponse = response ? mapNotificationResponse(response) : response;\n  return mappedResponse;\n}\nexport async function clearLastNotificationResponseAsync() {\n  clearLastNotificationResponse();\n}\nexport function clearLastNotificationResponse() {\n  if (!NotificationsEmitterModule.clearLastNotificationResponse) {\n    throw new UnavailabilityError('ExpoNotifications', 'clearLastNotificationResponse');\n  }\n  NotificationsEmitterModule.clearLastNotificationResponse();\n  emitter.emit(didClearNotificationResponseEventName, []);\n}\nexport function addNotificationResponseClearedListener(listener) {\n  return emitter.addListener(didClearNotificationResponseEventName, listener);\n}","map":{"version":3,"names":["LegacyEventEmitter","UnavailabilityError","NotificationsEmitterModule","mapNotification","mapNotificationResponse","emitter","didReceiveNotificationEventName","didDropNotificationsEventName","didReceiveNotificationResponseEventName","didClearNotificationResponseEventName","DEFAULT_ACTION_IDENTIFIER","addNotificationReceivedListener","listener","addListener","notification","mappedNotification","addNotificationsDroppedListener","addNotificationResponseReceivedListener","response","mappedResponse","removeNotificationSubscription","subscription","console","warn","remove","Error","getLastNotificationResponseAsync","getLastNotificationResponse","clearLastNotificationResponseAsync","clearLastNotificationResponse","emit","addNotificationResponseClearedListener"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/expo-notifications/src/NotificationsEmitter.ts"],"sourcesContent":["import { LegacyEventEmitter, type EventSubscription, UnavailabilityError } from 'expo-modules-core';\n\nimport { Notification, NotificationResponse } from './Notifications.types';\nimport NotificationsEmitterModule from './NotificationsEmitterModule';\nimport { mapNotification, mapNotificationResponse } from './utils/mapNotificationResponse';\n\n// Web uses SyntheticEventEmitter\nconst emitter = new LegacyEventEmitter(NotificationsEmitterModule);\n\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\nconst didDropNotificationsEventName = 'onNotificationsDeleted';\nconst didReceiveNotificationResponseEventName = 'onDidReceiveNotificationResponse';\nconst didClearNotificationResponseEventName = 'onDidClearNotificationResponse';\n\n// @docsMissing\nexport const DEFAULT_ACTION_IDENTIFIER = 'expo.modules.notifications.actions.DEFAULT';\n\n/**\n * Listeners registered by this method will be called whenever a notification is received while the app is running.\n * @param listener A function accepting a notification ([`Notification`](#notification)) as an argument.\n * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n * @example Registering a notification listener using a React hook:\n * ```jsx\n * import React from 'react';\n * import * as Notifications from 'expo-notifications';\n *\n * export default function App() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addNotificationReceivedListener(notification => {\n *       console.log(notification);\n *     });\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport function addNotificationReceivedListener(\n  listener: (event: Notification) => void\n): EventSubscription {\n  return emitter.addListener<Notification>(\n    didReceiveNotificationEventName,\n    (notification: Notification) => {\n      const mappedNotification = mapNotification(notification);\n      listener(mappedNotification);\n    }\n  );\n}\n\n/**\n * Listeners registered by this method will be called whenever some notifications have been dropped by the server.\n * Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback.\n * More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).\n * @param listener A callback function.\n * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n * @header listen\n */\nexport function addNotificationsDroppedListener(listener: () => void): EventSubscription {\n  return emitter.addListener<void>(didDropNotificationsEventName, listener);\n}\n\n/**\n * Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).\n * @param listener A function accepting notification response ([`NotificationResponse`](#notificationresponse)) as an argument.\n * @return An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.\n * @example Register a notification responder listener:\n * ```jsx\n * import React from 'react';\n * import { Linking } from 'react-native';\n * import * as Notifications from 'expo-notifications';\n *\n * export default function Container() {\n *   React.useEffect(() => {\n *     const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n *       const url = response.notification.request.content.data.url;\n *       Linking.openURL(url);\n *     });\n *     return () => subscription.remove();\n *   }, []);\n *\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport function addNotificationResponseReceivedListener(\n  listener: (event: NotificationResponse) => void\n): EventSubscription {\n  return emitter.addListener<NotificationResponse>(\n    didReceiveNotificationResponseEventName,\n    (response: NotificationResponse) => {\n      const mappedResponse = mapNotificationResponse(response);\n      listener(mappedResponse);\n    }\n  );\n}\n\n/**\n * @deprecated call `remove()` on the subscription object instead.\n *\n * Removes a notification subscription returned by an `addNotificationListener` call.\n * @param subscription A subscription returned by `addNotificationListener` method.\n * @header listen\n */\nexport function removeNotificationSubscription(subscription: EventSubscription) {\n  console.warn(\n    '`removeNotificationSubscription` is deprecated. Call `subscription.remove()` instead.'\n  );\n  if (typeof subscription?.remove === 'function') {\n    subscription.remove();\n  } else {\n    throw new Error(\n      `removeNotificationSubscription: Provided value is not a subscription: ${subscription}`\n    );\n  }\n}\n\n/**\n * Gets the notification response that was received most recently\n * (a notification response designates an interaction with a notification, such as tapping on it).\n *\n * - `null` - if no notification response has been received yet\n * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n */\nexport async function getLastNotificationResponseAsync(): Promise<NotificationResponse | null> {\n  return getLastNotificationResponse();\n}\n\n/**\n * Gets the notification response that was received most recently\n * (a notification response designates an interaction with a notification, such as tapping on it).\n *\n * - `null` - if no notification response has been received yet\n * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received\n */\nexport function getLastNotificationResponse(): NotificationResponse | null {\n  if (!NotificationsEmitterModule.getLastNotificationResponse) {\n    throw new UnavailabilityError('ExpoNotifications', 'getLastNotificationResponse');\n  }\n  const response = NotificationsEmitterModule.getLastNotificationResponse();\n  const mappedResponse = response ? mapNotificationResponse(response) : response;\n  return mappedResponse;\n}\n\n/**\n * Clears the notification response that was received most recently. May be used\n * when an app selects a route based on the notification response, and it is undesirable\n * to continue selecting the route after the response has already been handled.\n *\n * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n * this call will also clear the value returned by the hook.\n *\n * @return A promise that resolves if the native call was successful.\n */\nexport async function clearLastNotificationResponseAsync(): Promise<void> {\n  clearLastNotificationResponse();\n}\n\n/**\n * Clears the notification response that was received most recently. May be used\n * when an app selects a route based on the notification response, and it is undesirable\n * to continue selecting the route after the response has already been handled.\n *\n * If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook,\n * this call will also clear the value returned by the hook.\n *\n */\nexport function clearLastNotificationResponse(): void {\n  if (!NotificationsEmitterModule.clearLastNotificationResponse) {\n    throw new UnavailabilityError('ExpoNotifications', 'clearLastNotificationResponse');\n  }\n  NotificationsEmitterModule.clearLastNotificationResponse();\n  // Emit event to clear any useLastNotificationResponse hooks, after native call succeeds\n  emitter.emit(didClearNotificationResponseEventName, []);\n}\n\n/**\n * @hidden\n */\nexport function addNotificationResponseClearedListener(listener: () => void): EventSubscription {\n  return emitter.addListener<void>(didClearNotificationResponseEventName, listener);\n}\n"],"mappings":"AAAA,SAASA,kBAAkB,EAA0BC,mBAAmB,QAAQ,mBAAmB;AAGnG,OAAOC,0BAA0B,MAAM,8BAA8B;AACrE,SAASC,eAAe,EAAEC,uBAAuB,QAAQ,iCAAiC;AAG1F,MAAMC,OAAO,GAAG,IAAIL,kBAAkB,CAACE,0BAA0B,CAAC;AAElE,MAAMI,+BAA+B,GAAG,0BAA0B;AAClE,MAAMC,6BAA6B,GAAG,wBAAwB;AAC9D,MAAMC,uCAAuC,GAAG,kCAAkC;AAClF,MAAMC,qCAAqC,GAAG,gCAAgC;AAG9E,OAAO,MAAMC,yBAAyB,GAAG,4CAA4C;AA0BrF,OAAM,SAAUC,+BAA+BA,CAC7CC,QAAuC;EAEvC,OAAOP,OAAO,CAACQ,WAAW,CACxBP,+BAA+B,EAC9BQ,YAA0B,IAAI;IAC7B,MAAMC,kBAAkB,GAAGZ,eAAe,CAACW,YAAY,CAAC;IACxDF,QAAQ,CAACG,kBAAkB,CAAC;EAC9B,CAAC,CACF;AACH;AAUA,OAAM,SAAUC,+BAA+BA,CAACJ,QAAoB;EAClE,OAAOP,OAAO,CAACQ,WAAW,CAAON,6BAA6B,EAAEK,QAAQ,CAAC;AAC3E;AA4BA,OAAM,SAAUK,uCAAuCA,CACrDL,QAA+C;EAE/C,OAAOP,OAAO,CAACQ,WAAW,CACxBL,uCAAuC,EACtCU,QAA8B,IAAI;IACjC,MAAMC,cAAc,GAAGf,uBAAuB,CAACc,QAAQ,CAAC;IACxDN,QAAQ,CAACO,cAAc,CAAC;EAC1B,CAAC,CACF;AACH;AASA,OAAM,SAAUC,8BAA8BA,CAACC,YAA+B;EAC5EC,OAAO,CAACC,IAAI,CACV,uFAAuF,CACxF;EACD,IAAI,OAAOF,YAAY,EAAEG,MAAM,KAAK,UAAU,EAAE;IAC9CH,YAAY,CAACG,MAAM,EAAE;EACvB,CAAC,MAAM;IACL,MAAM,IAAIC,KAAK,CACb,yEAAyEJ,YAAY,EAAE,CACxF;EACH;AACF;AASA,OAAO,eAAeK,gCAAgCA,CAAA;EACpD,OAAOC,2BAA2B,EAAE;AACtC;AASA,OAAM,SAAUA,2BAA2BA,CAAA;EACzC,IAAI,CAACzB,0BAA0B,CAACyB,2BAA2B,EAAE;IAC3D,MAAM,IAAI1B,mBAAmB,CAAC,mBAAmB,EAAE,6BAA6B,CAAC;EACnF;EACA,MAAMiB,QAAQ,GAAGhB,0BAA0B,CAACyB,2BAA2B,EAAE;EACzE,MAAMR,cAAc,GAAGD,QAAQ,GAAGd,uBAAuB,CAACc,QAAQ,CAAC,GAAGA,QAAQ;EAC9E,OAAOC,cAAc;AACvB;AAYA,OAAO,eAAeS,kCAAkCA,CAAA;EACtDC,6BAA6B,EAAE;AACjC;AAWA,OAAM,SAAUA,6BAA6BA,CAAA;EAC3C,IAAI,CAAC3B,0BAA0B,CAAC2B,6BAA6B,EAAE;IAC7D,MAAM,IAAI5B,mBAAmB,CAAC,mBAAmB,EAAE,+BAA+B,CAAC;EACrF;EACAC,0BAA0B,CAAC2B,6BAA6B,EAAE;EAE1DxB,OAAO,CAACyB,IAAI,CAACrB,qCAAqC,EAAE,EAAE,CAAC;AACzD;AAKA,OAAM,SAAUsB,sCAAsCA,CAACnB,QAAoB;EACzE,OAAOP,OAAO,CAACQ,WAAW,CAAOJ,qCAAqC,EAAEG,QAAQ,CAAC;AACnF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}