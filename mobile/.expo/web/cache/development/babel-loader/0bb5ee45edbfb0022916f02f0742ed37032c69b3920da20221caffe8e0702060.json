{"ast":null,"code":"import Constants from 'expo-constants';\nimport { CodedError, Platform } from 'expo-modules-core';\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nexport default async function getDevicePushTokenAsync() {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  DeviceEventEmitter.emit('onDevicePushToken', {\n    devicePushToken: data\n  });\n  return {\n    type: Platform.OS,\n    data\n  };\n}\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError('ERR_UNAVAILABLE', 'The Web Notifications API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError('ERR_UNAVAILABLE', 'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError('ERR_NOTIFICATIONS_PERMISSION_DENIED', `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`);\n  }\n}\nasync function _subscribeDeviceToPushNotificationsAsync() {\n  const vapidPublicKey = Constants.expoConfig?.notification?.vapidPublicKey;\n  if (!vapidPublicKey) {\n    throw new CodedError('ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.');\n  }\n  const serviceWorkerPath = Constants.expoConfig?.notification?.serviceWorkerPath;\n  if (!serviceWorkerPath) {\n    throw new CodedError('ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION', 'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Provide the path to the service worker that will handle notifications.');\n  }\n  guardPermission();\n  let registration = null;\n  try {\n    registration = await navigator.serviceWorker.register(serviceWorkerPath);\n  } catch (error) {\n    throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', `Could not register this device for push notifications because the service worker (${serviceWorkerPath}) could not be registered: ${error}`);\n  }\n  await navigator.serviceWorker.ready;\n  if (!registration.active) {\n    throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'Could not register this device for push notifications because the service worker is not active.');\n  }\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey)\n  };\n  let pushSubscription = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError('ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + error + ')');\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys.p256dh,\n      auth: pushSubscriptionJson.keys.auth\n    }\n  };\n  const notificationIcon = (Constants.expoConfig?.notification ?? {}).icon;\n  await registration.active.postMessage(JSON.stringify({\n    fromExpoWebClient: {\n      notificationIcon\n    }\n  }));\n  return subscriptionObject;\n}\nfunction _urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}","map":{"version":3,"names":["Constants","CodedError","Platform","DeviceEventEmitter","getDevicePushTokenAsync","data","_subscribeDeviceToPushNotificationsAsync","emit","devicePushToken","type","OS","guardPermission","window","navigator","serviceWorker","Notification","permission","vapidPublicKey","expoConfig","notification","serviceWorkerPath","registration","register","error","ready","active","subscribeOptions","userVisibleOnly","applicationServerKey","_urlBase64ToUint8Array","pushSubscription","pushManager","subscribe","pushSubscriptionJson","toJSON","subscriptionObject","endpoint","keys","p256dh","auth","notificationIcon","icon","postMessage","JSON","stringify","fromExpoWebClient","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/expo-notifications/src/getDevicePushTokenAsync.web.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport { CodedError, Platform } from 'expo-modules-core';\nimport { DeviceEventEmitter } from 'react-native';\n\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  const data = await _subscribeDeviceToPushNotificationsAsync();\n  DeviceEventEmitter.emit('onDevicePushToken', { devicePushToken: data });\n  return { type: Platform.OS, data };\n}\n\nfunction guardPermission() {\n  if (!('Notification' in window)) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'The Web Notifications API is not available on this device.'\n    );\n  }\n  if (!navigator.serviceWorker) {\n    throw new CodedError(\n      'ERR_UNAVAILABLE',\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PERMISSION_DENIED',\n      `Cannot use web notifications without permissions granted. Request permissions with \"expo-permissions\".`\n    );\n  }\n}\n\nasync function _subscribeDeviceToPushNotificationsAsync(): Promise<DevicePushToken['data']> {\n  // @ts-expect-error: TODO: not on the schema\n  const vapidPublicKey: string | null = Constants.expoConfig?.notification?.vapidPublicKey;\n  if (!vapidPublicKey) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.dev/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  // @ts-expect-error: TODO: not on the schema\n  const serviceWorkerPath = Constants.expoConfig?.notification?.serviceWorkerPath;\n  if (!serviceWorkerPath) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_MISSING_CONFIGURATION',\n      'You must specify `notification.serviceWorkerPath` in `app.json` to use push notifications on the web. Provide the path to the service worker that will handle notifications.'\n    );\n  }\n  guardPermission();\n\n  let registration: ServiceWorkerRegistration | null = null;\n  try {\n    registration = await navigator.serviceWorker.register(serviceWorkerPath);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      `Could not register this device for push notifications because the service worker (${serviceWorkerPath}) could not be registered: ${error}`\n    );\n  }\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'Could not register this device for push notifications because the service worker is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(vapidPublicKey),\n  };\n  let pushSubscription: PushSubscription | null = null;\n  try {\n    pushSubscription = await registration.pushManager.subscribe(subscribeOptions);\n  } catch (error) {\n    throw new CodedError(\n      'ERR_NOTIFICATIONS_PUSH_REGISTRATION_FAILED',\n      'The device was unable to register for remote notifications with the browser endpoint. (' +\n        error +\n        ')'\n    );\n  }\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.expoConfig?.notification ?? {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}