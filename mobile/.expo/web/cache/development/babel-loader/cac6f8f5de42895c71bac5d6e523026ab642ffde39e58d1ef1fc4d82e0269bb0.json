{"ast":null,"code":"import { UnavailabilityError, Platform } from 'expo-modules-core';\nimport BadgeModule from './BadgeModule';\nexport default async function setBadgeCountAsync(badgeCount, options) {\n  if (!BadgeModule.setBadgeCountAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'setBadgeCountAsync');\n  }\n  const platformOptions = options?.[Platform.OS];\n  return await BadgeModule.setBadgeCountAsync(badgeCount, platformOptions);\n}","map":{"version":3,"names":["UnavailabilityError","Platform","BadgeModule","setBadgeCountAsync","badgeCount","options","platformOptions","OS"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/expo-notifications/src/setBadgeCountAsync.ts"],"sourcesContent":["import { UnavailabilityError, Platform } from 'expo-modules-core';\n\nimport BadgeModule from './BadgeModule';\nimport { WebSetBadgeCountOptions } from './BadgeModule.types';\n\nexport interface SetBadgeCountOptions {\n  /**\n   * A configuration object described [in the `badgin` documentation](https://github.com/jaulz/badgin#options).\n   */\n  web?: WebSetBadgeCountOptions;\n}\n\n/**\n * Sets the badge of the app's icon to the specified number. Setting it to `0` clears the badge. On iOS, this method requires that you have requested\n * the user's permission for `allowBadge` via [`requestPermissionsAsync`](#requestpermissionsasyncpermissions),\n * otherwise it will automatically return `false`.\n * > **Note:** Not all Android launchers support application badges. If the launcher does not support icon badges, the method will resolve to `false`.\n * @param badgeCount The count which should appear on the badge. A value of `0` will clear the badge.\n * @param options An object of options configuring behavior applied.\n * @return It returns a Promise resolving to a boolean representing whether the setting of the badge succeeded.\n * @header badge\n */\nexport default async function setBadgeCountAsync(\n  badgeCount: number,\n  options?: SetBadgeCountOptions\n): Promise<boolean> {\n  if (!BadgeModule.setBadgeCountAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'setBadgeCountAsync');\n  }\n  const platformOptions = options?.[Platform.OS as keyof typeof options];\n  return await BadgeModule.setBadgeCountAsync(badgeCount, platformOptions);\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,EAAEC,QAAQ,QAAQ,mBAAmB;AAEjE,OAAOC,WAAW,MAAM,eAAe;AAoBvC,eAAe,eAAeC,kBAAkBA,CAC9CC,UAAkB,EAClBC,OAA8B;EAE9B,IAAI,CAACH,WAAW,CAACC,kBAAkB,EAAE;IACnC,MAAM,IAAIH,mBAAmB,CAAC,mBAAmB,EAAE,oBAAoB,CAAC;EAC1E;EACA,MAAMM,eAAe,GAAGD,OAAO,GAAGJ,QAAQ,CAACM,EAA0B,CAAC;EACtE,OAAO,MAAML,WAAW,CAACC,kBAAkB,CAACC,UAAU,EAAEE,eAAe,CAAC;AAC1E","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}