{"ast":null,"code":"import { PermissionStatus } from 'expo-modules-core';\nimport { LocationAccuracy } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\nclass GeocoderError extends Error {\n  constructor() {\n    super('Geocoder service is not available for this device.');\n    this.code = 'E_NO_GEOCODER';\n  }\n}\nfunction geolocationPositionToJSON(position) {\n  const {\n    coords,\n    timestamp\n  } = position;\n  return {\n    coords: {\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n      altitude: coords.altitude,\n      accuracy: coords.accuracy,\n      altitudeAccuracy: coords.altitudeAccuracy,\n      heading: coords.heading,\n      speed: coords.speed\n    },\n    timestamp\n  };\n}\nfunction isLocationValid(location, options) {\n  const maxAge = typeof options.maxAge === 'number' ? options.maxAge : Infinity;\n  const requiredAccuracy = typeof options.requiredAccuracy === 'number' ? options.requiredAccuracy : Infinity;\n  const locationAccuracy = location.coords.accuracy ?? Infinity;\n  return Date.now() - location.timestamp <= maxAge && locationAccuracy <= requiredAccuracy;\n}\nasync function getPermissionsAsync() {\n  return new Promise(resolve => {\n    const resolveWithStatus = status => resolve({\n      status,\n      granted: status === PermissionStatus.GRANTED,\n      canAskAgain: true,\n      expires: 0\n    });\n    navigator.geolocation.getCurrentPosition(() => resolveWithStatus(PermissionStatus.GRANTED), ({\n      code\n    }) => {\n      if (code === 1) {\n        resolveWithStatus(PermissionStatus.DENIED);\n      } else {\n        resolveWithStatus(PermissionStatus.UNDETERMINED);\n      }\n    }, {\n      enableHighAccuracy: false,\n      maximumAge: Infinity\n    });\n  });\n}\nlet lastKnownPosition = null;\nexport default {\n  get name() {\n    return 'ExpoLocation';\n  },\n  async getProviderStatusAsync() {\n    return {\n      locationServicesEnabled: 'geolocation' in navigator\n    };\n  },\n  async getLastKnownPositionAsync(options = {}) {\n    if (lastKnownPosition && isLocationValid(lastKnownPosition, options)) {\n      return lastKnownPosition;\n    }\n    return null;\n  },\n  async getCurrentPositionAsync(options) {\n    return new Promise((resolve, reject) => {\n      const resolver = position => {\n        lastKnownPosition = geolocationPositionToJSON(position);\n        resolve(lastKnownPosition);\n      };\n      navigator.geolocation.getCurrentPosition(resolver, reject, Object.assign({\n        maximumAge: Infinity,\n        enableHighAccuracy: (options.accuracy ?? 0) > LocationAccuracy.Balanced\n      }, options));\n    });\n  },\n  async removeWatchAsync(watchId) {\n    navigator.geolocation.clearWatch(watchId);\n  },\n  async watchDeviceHeading(headingId) {\n    console.warn('Location.watchDeviceHeading: is not supported on web');\n  },\n  async hasServicesEnabledAsync() {\n    return 'geolocation' in navigator;\n  },\n  async geocodeAsync() {\n    throw new GeocoderError();\n  },\n  async reverseGeocodeAsync() {\n    throw new GeocoderError();\n  },\n  async watchPositionImplAsync(watchId, options) {\n    return new Promise(resolve => {\n      watchId = global.navigator.geolocation.watchPosition(position => {\n        lastKnownPosition = geolocationPositionToJSON(position);\n        LocationEventEmitter.emit('Expo.locationChanged', {\n          watchId,\n          location: lastKnownPosition\n        });\n      }, undefined, options);\n      resolve(watchId);\n    });\n  },\n  getPermissionsAsync,\n  async requestPermissionsAsync() {\n    return getPermissionsAsync();\n  },\n  async requestForegroundPermissionsAsync() {\n    return getPermissionsAsync();\n  },\n  async requestBackgroundPermissionsAsync() {\n    return getPermissionsAsync();\n  },\n  async getForegroundPermissionsAsync() {\n    return getPermissionsAsync();\n  },\n  async getBackgroundPermissionsAsync() {\n    return getPermissionsAsync();\n  },\n  startObserving() {},\n  stopObserving() {}\n};","map":{"version":3,"names":["PermissionStatus","LocationAccuracy","LocationEventEmitter","GeocoderError","Error","constructor","code","geolocationPositionToJSON","position","coords","timestamp","latitude","longitude","altitude","accuracy","altitudeAccuracy","heading","speed","isLocationValid","location","options","maxAge","Infinity","requiredAccuracy","locationAccuracy","Date","now","getPermissionsAsync","Promise","resolve","resolveWithStatus","status","granted","GRANTED","canAskAgain","expires","navigator","geolocation","getCurrentPosition","DENIED","UNDETERMINED","enableHighAccuracy","maximumAge","lastKnownPosition","name","getProviderStatusAsync","locationServicesEnabled","getLastKnownPositionAsync","getCurrentPositionAsync","reject","resolver","Object","assign","Balanced","removeWatchAsync","watchId","clearWatch","watchDeviceHeading","headingId","console","warn","hasServicesEnabledAsync","geocodeAsync","reverseGeocodeAsync","watchPositionImplAsync","global","watchPosition","emit","undefined","requestPermissionsAsync","requestForegroundPermissionsAsync","requestBackgroundPermissionsAsync","getForegroundPermissionsAsync","getBackgroundPermissionsAsync","startObserving","stopObserving"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/expo-location/src/ExpoLocation.web.ts"],"sourcesContent":["import { PermissionResponse, PermissionStatus } from 'expo-modules-core';\n\nimport {\n  LocationLastKnownOptions,\n  LocationObject,\n  LocationOptions,\n  LocationAccuracy,\n} from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\n\nclass GeocoderError extends Error {\n  code: string;\n\n  constructor() {\n    super('Geocoder service is not available for this device.');\n    this.code = 'E_NO_GEOCODER';\n  }\n}\n\n/**\n * Converts `GeolocationPosition` to JavaScript object.\n */\nfunction geolocationPositionToJSON(position: LocationObject): LocationObject {\n  const { coords, timestamp } = position;\n  return {\n    coords: {\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n      altitude: coords.altitude,\n      accuracy: coords.accuracy,\n      altitudeAccuracy: coords.altitudeAccuracy,\n      heading: coords.heading,\n      speed: coords.speed,\n    },\n    timestamp,\n  };\n}\n\n/**\n * Checks whether given location didn't exceed given `maxAge` and fits in the required accuracy.\n */\nfunction isLocationValid(location: LocationObject, options: LocationLastKnownOptions): boolean {\n  const maxAge = typeof options.maxAge === 'number' ? options.maxAge : Infinity;\n  const requiredAccuracy =\n    typeof options.requiredAccuracy === 'number' ? options.requiredAccuracy : Infinity;\n  const locationAccuracy = location.coords.accuracy ?? Infinity;\n\n  return Date.now() - location.timestamp <= maxAge && locationAccuracy <= requiredAccuracy;\n}\n\n/**\n * Gets the permission details. The implementation is not very good as it actually requests\n * for the current location, but there is no better way on web so far :(\n */\nasync function getPermissionsAsync(): Promise<PermissionResponse> {\n  return new Promise<PermissionResponse>((resolve) => {\n    const resolveWithStatus = (status) =>\n      resolve({\n        status,\n        granted: status === PermissionStatus.GRANTED,\n        canAskAgain: true,\n        expires: 0,\n      });\n\n    navigator.geolocation.getCurrentPosition(\n      () => resolveWithStatus(PermissionStatus.GRANTED),\n      ({ code }) => {\n        if (code === 1 /* PERMISSION_DENIED */) {\n          resolveWithStatus(PermissionStatus.DENIED);\n        } else {\n          resolveWithStatus(PermissionStatus.UNDETERMINED);\n        }\n      },\n      { enableHighAccuracy: false, maximumAge: Infinity }\n    );\n  });\n}\n\nlet lastKnownPosition: LocationObject | null = null;\n\nexport default {\n  get name(): string {\n    return 'ExpoLocation';\n  },\n  async getProviderStatusAsync(): Promise<{ locationServicesEnabled: boolean }> {\n    return {\n      locationServicesEnabled: 'geolocation' in navigator,\n    };\n  },\n  async getLastKnownPositionAsync(\n    options: LocationLastKnownOptions = {}\n  ): Promise<LocationObject | null> {\n    if (lastKnownPosition && isLocationValid(lastKnownPosition, options)) {\n      return lastKnownPosition;\n    }\n    return null;\n  },\n  async getCurrentPositionAsync(options: LocationOptions): Promise<LocationObject> {\n    return new Promise<LocationObject>((resolve, reject) => {\n      const resolver = (position) => {\n        lastKnownPosition = geolocationPositionToJSON(position);\n        resolve(lastKnownPosition);\n      };\n      navigator.geolocation.getCurrentPosition(resolver, reject, {\n        maximumAge: Infinity,\n        enableHighAccuracy: (options.accuracy ?? 0) > LocationAccuracy.Balanced,\n        ...options,\n      });\n    });\n  },\n  async removeWatchAsync(watchId): Promise<void> {\n    navigator.geolocation.clearWatch(watchId);\n  },\n  async watchDeviceHeading(headingId): Promise<void> {\n    console.warn('Location.watchDeviceHeading: is not supported on web');\n  },\n  async hasServicesEnabledAsync(): Promise<boolean> {\n    return 'geolocation' in navigator;\n  },\n  async geocodeAsync(): Promise<any[]> {\n    throw new GeocoderError();\n  },\n  async reverseGeocodeAsync(): Promise<any[]> {\n    throw new GeocoderError();\n  },\n  async watchPositionImplAsync(watchId: string, options: LocationOptions): Promise<string> {\n    return new Promise<string>((resolve) => {\n      // @ts-ignore: the types here need to be fixed\n      watchId = global.navigator.geolocation.watchPosition(\n        (position) => {\n          lastKnownPosition = geolocationPositionToJSON(position);\n          LocationEventEmitter.emit('Expo.locationChanged', {\n            watchId,\n            location: lastKnownPosition,\n          });\n        },\n        undefined,\n        // @ts-ignore: the options object needs to be fixed\n        options\n      );\n      resolve(watchId);\n    });\n  },\n\n  getPermissionsAsync,\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return getPermissionsAsync();\n  },\n  async requestForegroundPermissionsAsync(): Promise<PermissionResponse> {\n    return getPermissionsAsync();\n  },\n  async requestBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n    return getPermissionsAsync();\n  },\n  async getForegroundPermissionsAsync(): Promise<PermissionResponse> {\n    return getPermissionsAsync();\n  },\n  async getBackgroundPermissionsAsync(): Promise<PermissionResponse> {\n    return getPermissionsAsync();\n  },\n\n  // no-op\n  startObserving() {},\n  stopObserving() {},\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}