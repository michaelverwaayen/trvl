{"ast":null,"code":"import { useLayoutEffect, useState } from 'react';\nimport { addNotificationResponseReceivedListener, addNotificationResponseClearedListener, getLastNotificationResponseAsync } from './NotificationsEmitter';\nexport default function useLastNotificationResponse() {\n  const [lastNotificationResponse, setLastNotificationResponse] = useState(undefined);\n  useLayoutEffect(() => {\n    let isMounted = true;\n    getLastNotificationResponseAsync().then(response => {\n      if (isMounted) {\n        setLastNotificationResponse(prevResponse => determineNextResponse(prevResponse, response));\n      }\n    });\n    const subscription = addNotificationResponseReceivedListener(response => setLastNotificationResponse(prevResponse => determineNextResponse(prevResponse, response)));\n    const clearResponseSubscription = addNotificationResponseClearedListener(() => {\n      setLastNotificationResponse(null);\n    });\n    return () => {\n      isMounted = false;\n      subscription.remove();\n      clearResponseSubscription.remove();\n    };\n  }, []);\n  return lastNotificationResponse;\n}\nexport const determineNextResponse = (prevResponse, newResponse) => {\n  if (!newResponse) {\n    return null;\n  }\n  if (!prevResponse) {\n    return newResponse;\n  }\n  return prevResponse.notification.request.identifier !== newResponse.notification.request.identifier ? newResponse : prevResponse;\n};","map":{"version":3,"names":["useLayoutEffect","useState","addNotificationResponseReceivedListener","addNotificationResponseClearedListener","getLastNotificationResponseAsync","useLastNotificationResponse","lastNotificationResponse","setLastNotificationResponse","undefined","isMounted","then","response","prevResponse","determineNextResponse","subscription","clearResponseSubscription","remove","newResponse","notification","request","identifier"],"sources":["/Users/michaelverwaayen/RFQ/mobile/node_modules/expo-notifications/src/useLastNotificationResponse.ts"],"sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\nimport { MaybeNotificationResponse, NotificationResponse } from './Notifications.types';\nimport {\n  addNotificationResponseReceivedListener,\n  addNotificationResponseClearedListener,\n  getLastNotificationResponseAsync,\n} from './NotificationsEmitter';\n\n/**\n * A React hook which returns the notification response that was received most recently\n * (a notification response designates an interaction with a notification, such as tapping on it).\n *\n * To clear the last notification response, use [`clearLastNotificationResponseAsync()`](#notificationsclearlastnotificationresponseasync).\n *\n * > If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.\n *\n * @return The hook may return one of these three types/values:\n * - `undefined` - until we're sure of what to return,\n * - `null` - if no notification response has been received yet,\n * - a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.\n *\n * @example\n * Responding to a notification tap by opening a URL that could be put into the notification's `data`\n * (opening the URL is your responsibility and is not a part of the `expo-notifications` API):\n * ```jsx\n * import * as Notifications from 'expo-notifications';\n * import { Linking } from 'react-native';\n *\n * export default function App() {\n *   const lastNotificationResponse = Notifications.useLastNotificationResponse();\n *   React.useEffect(() => {\n *     if (\n *       lastNotificationResponse &&\n *       lastNotificationResponse.notification.request.content.data.url &&\n *       lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n *     ) {\n *       Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n *     }\n *   }, [lastNotificationResponse]);\n *   return (\n *     // Your app content\n *   );\n * }\n * ```\n * @header listen\n */\nexport default function useLastNotificationResponse() {\n  const [lastNotificationResponse, setLastNotificationResponse] =\n    useState<MaybeNotificationResponse>(undefined);\n\n  // useLayoutEffect ensures the listener is registered as soon as possible\n  useLayoutEffect(() => {\n    let isMounted = true;\n    // Get the last response first, in case it was set earlier (even in native code on startup)\n    getLastNotificationResponseAsync().then((response) => {\n      if (isMounted) {\n        setLastNotificationResponse((prevResponse) =>\n          determineNextResponse(prevResponse, response)\n        );\n      }\n    });\n\n    // Set up listener for responses that come in, and set the last response if needed\n    const subscription = addNotificationResponseReceivedListener((response) =>\n      setLastNotificationResponse((prevResponse) => determineNextResponse(prevResponse, response))\n    );\n    const clearResponseSubscription = addNotificationResponseClearedListener(() => {\n      setLastNotificationResponse(null);\n    });\n    return () => {\n      isMounted = false;\n      subscription.remove();\n      clearResponseSubscription.remove();\n    };\n  }, []);\n\n  return lastNotificationResponse;\n}\n\n// returns the new response if it is different from the previous,\n// also has to return undefined until we're sure of what to return (null or a response)\n// the transition from response to null is invalid\nexport const determineNextResponse = (\n  prevResponse: MaybeNotificationResponse,\n  newResponse: NotificationResponse | null\n) => {\n  if (!newResponse) {\n    return null;\n  }\n  if (!prevResponse) {\n    return newResponse;\n  }\n  return prevResponse.notification.request.identifier !==\n    newResponse.notification.request.identifier\n    ? newResponse\n    : prevResponse;\n};\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,QAAQ,QAAQ,OAAO;AAGjD,SACEC,uCAAuC,EACvCC,sCAAsC,EACtCC,gCAAgC,QAC3B,wBAAwB;AAwC/B,eAAc,SAAUC,2BAA2BA,CAAA;EACjD,MAAM,CAACC,wBAAwB,EAAEC,2BAA2B,CAAC,GAC3DN,QAAQ,CAA4BO,SAAS,CAAC;EAGhDR,eAAe,CAAC,MAAK;IACnB,IAAIS,SAAS,GAAG,IAAI;IAEpBL,gCAAgC,EAAE,CAACM,IAAI,CAAEC,QAAQ,IAAI;MACnD,IAAIF,SAAS,EAAE;QACbF,2BAA2B,CAAEK,YAAY,IACvCC,qBAAqB,CAACD,YAAY,EAAED,QAAQ,CAAC,CAC9C;MACH;IACF,CAAC,CAAC;IAGF,MAAMG,YAAY,GAAGZ,uCAAuC,CAAES,QAAQ,IACpEJ,2BAA2B,CAAEK,YAAY,IAAKC,qBAAqB,CAACD,YAAY,EAAED,QAAQ,CAAC,CAAC,CAC7F;IACD,MAAMI,yBAAyB,GAAGZ,sCAAsC,CAAC,MAAK;MAC5EI,2BAA2B,CAAC,IAAI,CAAC;IACnC,CAAC,CAAC;IACF,OAAO,MAAK;MACVE,SAAS,GAAG,KAAK;MACjBK,YAAY,CAACE,MAAM,EAAE;MACrBD,yBAAyB,CAACC,MAAM,EAAE;IACpC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOV,wBAAwB;AACjC;AAKA,OAAO,MAAMO,qBAAqB,GAAGA,CACnCD,YAAuC,EACvCK,WAAwC,KACtC;EACF,IAAI,CAACA,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;EACA,IAAI,CAACL,YAAY,EAAE;IACjB,OAAOK,WAAW;EACpB;EACA,OAAOL,YAAY,CAACM,YAAY,CAACC,OAAO,CAACC,UAAU,KACjDH,WAAW,CAACC,YAAY,CAACC,OAAO,CAACC,UAAU,GACzCH,WAAW,GACXL,YAAY;AAClB,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}